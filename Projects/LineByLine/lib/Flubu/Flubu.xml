<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flubu</name>
    </assembly>
    <members>
        <member name="M:Flubu.Beeper.Beep(Flubu.MessageBeepType)">
            <summary>
            Sounds a beep.
            </summary>
            <param name="messageBeepType">Type of the message beep.</param>
        </member>
        <member name="T:Flubu.TaskBase">
            <summary>
            A base abstract class from which tasks can be implemented.
            </summary>
        </member>
        <member name="T:Flubu.ITask">
            <summary>
            Specifies basic properties and methods for a task.
            </summary>
        </member>
        <member name="M:Flubu.ITask.Execute(Flubu.ITaskContext)">
            <summary>
            Executes the task using the specified script execution environment.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.ITask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.TaskBase.Execute(Flubu.ITaskContext)">
            <summary>
            Executes the task using the specified script execution environment.
            </summary>
            <remarks>This method implements the basic reporting and error handling for
            classes which inherit the <see cref="T:Flubu.TaskBase"/> class.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:Flubu.TaskBase.DoExecute(Flubu.ITaskContext)">
            <summary>
            Abstract method defining the actual work for a task.
            </summary>
            <remarks>This method has to be implemented by the inheriting task.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.TaskBase.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.TaskBase.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Flubu.TaskBase.LogDuration">
            <summary>
            Gets a value indicating whether the duration of the task should be logged after the task
            has finished.
            </summary>
            <value><c>true</c> if duration should be logged; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectItem">
            <summary>
            Holds information about content items inside of a VisualStudio project.
            </summary>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProject">
            <summary>
            Represents a VisualStudio project.
            </summary>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProject.FindConfiguration(System.String)">
            <summary>
            Finds the VisualStudio project configuration specified by a condition.
            </summary>
            <param name="condition">The condition which identifies the configuration 
            (example: " '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ").</param>
            <returns><see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectConfiguration"/> object if found; <c>null</c> if no configuration was found that meets the
            specified condition.</returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProject.Load(System.String)">
            <summary>
            Loads the specified project file name.
            </summary>
            <param name="projectFileName">Name of the project file.</param>
            <returns>VSProject class containing project information.</returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProject.GetSingleTypeItems(System.String)">
            <summary>
            Gets the List of VSProjectItem single type items.
            </summary>
            <param name="getItemType">Type of the item.</param>
            <returns>List of items of specific itemType.</returns>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProject.Configurations">
            <summary>
            Gets a read-only collection of project configurations.
            </summary>
            <value>A read-only collection of project configurations.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProject.Items">
            <summary>
            Gets a read-only collection of all .cs files in the solution.
            </summary>
            <value>A read-only collection of all the .cs files in the solution.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProject.Properties">
            <summary>
            Gets a read-only collection of project properties.
            </summary>
            <value>A read-only collection of project properties.</value>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectConfiguration">
            <summary>
            Contains information of compile configuration.
            </summary>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo">
            <summary>
            Holds information about a VisualStudio project.
            </summary>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.GetProjectOutputPath(System.String)">
            <summary>
            Gets the output path for a specified VisualStudio project. The output path is relative
            to the directory where the project file is located.
            </summary>
            <param name="buildConfiguration">The build configuration.</param>
            <returns>
            The output path or <c>null</c> if the project is not compatibile.
            </returns>
            <exception cref="T:System.ArgumentException">The method could not extract the data from the project file.</exception>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.Project">
            <summary>
            Gets or sets the <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProject"/> object holding the detailed information about this VisualStudio
            project.
            </summary>
            <value>The <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProject"/> object .</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectDirectoryPath">
            <summary>
            Gets the path to the directory where the project file is located.
            </summary>
            <value>The project directory path.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileName">
            <summary>
            Gets the name of the project file. The file name is relative to the solution's directory.
            </summary>
            <remarks>The full path to the project file can be retrieved using the <see cref="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileNameFull"/>
            property.</remarks>
            <value>The name of the project file.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileNameFull">
            <summary>
            Gets the full path to the project file.
            </summary>
            <value>The full path to the project file.</value>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType">
            <summary>
            Contains information about a specific VisualStudio project type.
            </summary>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> class.
            </summary>
            <param name="projectTypeGuid">The project type GUID.</param>
            <param name="projectTypeName">Name of the project type.</param>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.Equals(Flubu.Builds.VSSolutionBrowsing.VSProjectType)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">
                An object to compare with this object.
            </param>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.op_Equality(Flubu.Builds.VSSolutionBrowsing.VSProjectType,Flubu.Builds.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Compares the two objects.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.op_Inequality(Flubu.Builds.VSSolutionBrowsing.VSProjectType,Flubu.Builds.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Compares the two objects.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectType.CSharpProjectType">
            <summary>
            Gets the <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> for C# projects.
            </summary>
            <value>The <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> for C# projects.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectType.ProjectTypeGuid">
            <summary>
            Gets the project type GUID.
            </summary>
            <value>The project type GUID.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectType.ProjectTypeName">
            <summary>
            Gets the name of the project type.
            </summary>
            <value>The name of the project type.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectType.SolutionFolderProjectType">
            <summary>
            Gets the <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> for solution folders.
            </summary>
            <value>The <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> for solution folders.</value>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectTypesDictionary">
            <summary>
            A dictionary of registered VisualStudio project types.
            </summary>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectTypesDictionary.RegisterProjectType(Flubu.Builds.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Registers a new type of the VisualStudio project.
            </summary>
            <param name="projectType">&gt;<see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> object to be registered.</param>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectTypesDictionary.FindProjectType(System.Guid)">
            <summary>
            Tries to find <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> object for a specific VisualStudio project type Guid.
            </summary>
            <param name="projectTypeGuid">The project type GUID.</param>
            <returns><see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> object holding information about the specified VisualStudio project 
            type; <c>null</c> if the project type is not registered.</returns>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSSolution">
            <summary>
            Represents a VisualStudio solution.
            </summary>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSSolution.FindProjectById(System.Guid)">
            <summary>
            Finds the project by its unique id.
            </summary>
            <param name="projectGuid">The project's GUID.</param>
            <returns>The <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo"/> object representing the project.</returns>
            <exception cref="T:System.ArgumentException">The project was not found.</exception>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSSolution.ForEachProject(System.Action{Flubu.Builds.VSSolutionBrowsing.VSProjectInfo})">
            <summary>
            Performs the specified action on each project of the solution.
            </summary>
            <param name="action">The action delegate to perform on each project.</param>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSSolution.Load(System.String)">
            <summary>
            Loads the specified VisualStudio solution file and returns a <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSSolution"/> representing the solution.
            </summary>
            <param name="fileName">The name of the solution file.</param>
            <returns>A <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSSolution"/> representing the solution.</returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSSolution.LoadProjects">
            <summary>
            Loads the VisualStudio project files and fills the project data into <see cref="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.Project"/> 
            properties for each of the project in the solution.
            </summary>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSSolution.Projects">
            <summary>
            Gets a read-only collection of <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo"/> objects for all of the projects in the solution.
            </summary>
            <value>A read-only collection of <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo"/> objects .</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSSolution.ProjectTypesDictionary">
            <summary>
            Gets or sets the VisualStudio project types dictionary.
            </summary>
            <value>The VisualStudio project types dictionary.</value>
        </member>
        <member name="M:Flubu.FlubuEnvironment.GetDotNetFWDir(System.String)">
            <summary>
            Gets the path to the .NET Framework directory.
            </summary>
            <param name="dotNetVersion">The version of the .NET (example: "v2.0.50727").</param>
            <returns>
            The path to the .NET Framework directory.
            </returns>
        </member>
        <member name="P:Flubu.FlubuEnvironment.IsWinServer2003">
            <summary>
            Gets a value indicating whether the script is running on Windows Server 2003.
            </summary>
            <value>
                <c>true</c> if the script is running on Windows Server 2003; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Flubu.FlubuEnvironment.Net10VersionNumber">
            <summary>
            Gets the .NET version number for .NET 1.0.
            </summary>
            <value>.NET version number for .NET 1.0.</value>
        </member>
        <member name="P:Flubu.FlubuEnvironment.Net11VersionNumber">
            <summary>
            Gets the .NET version number for .NET 1.1.
            </summary>
            <value>.NET version number for .NET 1.1.</value>
        </member>
        <member name="P:Flubu.FlubuEnvironment.Net20VersionNumber">
            <summary>
            Gets the .NET version number for .NET 2.0.
            </summary>
            <value>.NET version number for .NET 2.0.</value>
        </member>
        <member name="P:Flubu.FlubuEnvironment.Net30VersionNumber">
            <summary>
            Gets the .NET version number for .NET 3.0.
            </summary>
            <value>.NET version number for .NET 3.0.</value>
        </member>
        <member name="P:Flubu.FlubuEnvironment.Net35VersionNumber">
            <summary>
            Gets the .NET version number for .NET 3.0.
            </summary>
            <value>.NET version number for .NET 3.0.</value>
        </member>
        <member name="P:Flubu.FlubuEnvironment.Net40VersionNumber">
            <summary>
            Gets the .NET version number for .NET 3.0.
            </summary>
            <value>.NET version number for .NET 3.0.</value>
        </member>
        <member name="P:Flubu.FlubuEnvironment.SystemRootDir">
            <summary>
            Gets the Windows system root directory path.
            </summary>
            <value>The Windows system root directory path.</value>
        </member>
        <member name="P:Flubu.FullPath.ParentPath">
            <summary>
            Gets the path that is a parent to the current path in this object.
            </summary>
            <value>The parent path.</value>
        </member>
        <member name="P:Flubu.LocalPath.ParentPath">
            <summary>
            Gets the path that is a parent to the current path in this object.
            </summary>
            <value>The parent path.</value>
        </member>
        <member name="M:Flubu.Targeting.ITarget.DependsOn(System.String[])">
            <summary>
            Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="M:Flubu.Targeting.ITarget.SetAsDefault">
            <summary>
            Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="M:Flubu.Targeting.ITarget.SetAsHidden">
            <summary>
            Sets the target as hidden. Hidden targets will not be
            visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="!:FlubuRunnerTarget&lt;TRunner&gt;"/>.</returns>
        </member>
        <member name="P:Flubu.Targeting.ITarget.IsHidden">
            <summary>
            Gets a value indicating whether this target is hidden. Hidden targets will not be
            visible in the list of targets displayed to the user as help.
            </summary>
            <value><c>true</c> if this target is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Flubu.MessageBeepType.Default">
            <summary>
            Default message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Ok">
            <summary>
            OK message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Error">
            <summary>
            Error message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Question">
            <summary>
            Question message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Warning">
            <summary>
            Warning message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Information">
            <summary>
            Information message beep.
            </summary>
        </member>
        <member name="T:Flubu.MulticoloredConsoleLogger">
            <summary>
            A standard multi-colored console output for Flubu.
            </summary>
        </member>
        <member name="M:Flubu.MulticoloredConsoleLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.MulticoloredConsoleLogger"/> class
            using the specified text writer.
            </summary>
            <param name="writer">The text writer to use to write log messages.</param>
        </member>
        <member name="M:Flubu.MulticoloredConsoleLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Flubu.MulticoloredConsoleLogger.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">If <code>false</code>, cleans up native resources. 
            If <code>true</code> cleans up both managed and native resources</param>
        </member>
        <member name="P:Flubu.MulticoloredConsoleLogger.IsConsoleOutput">
            <summary>
            Gets a value indicating whether this logger logs to the <see cref="P:System.Console.Out"/>.
            </summary>
            <value>
                <c>true</c> if this instance uses console output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Flubu.OperatingSystem.WindowsXP">
            <summary>
            Indicates the Windows XP operating system.
            </summary>
        </member>
        <member name="F:Flubu.OperatingSystem.WindowsServer2000">
            <summary>
            Indicates the Windows Server 2000 operating system.
            </summary>
        </member>
        <member name="F:Flubu.OperatingSystem.WindowsServer2003">
            <summary>
            Indicates the Windows Server 2003 operating system.
            </summary>
        </member>
        <member name="M:Flubu.Targeting.Target.DependsOn(System.String[])">
            <summary>
            Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="M:Flubu.Targeting.Target.SetAsDefault">
            <summary>
            Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="M:Flubu.Targeting.Target.SetAsHidden">
            <summary>
            Sets the target as hidden. Hidden targets will not be
            visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="P:Flubu.Targeting.Target.Description">
            <summary>
            Gets the description of the target.
            </summary>
            <value>The description of the target.</value>
        </member>
        <member name="P:Flubu.Targeting.Target.IsHidden">
            <summary>
            Gets a value indicating whether this target is hidden. Hidden targets will not be
            visible in the list of targets displayed to the user as help.
            </summary>
            <value><c>true</c> if this target is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Flubu.Targeting.TargetTree.HasTarget(System.String)">
            <summary>
            Determines whether the specified target exists.
            </summary>
            <param name="targetName">Name of the target.</param>
            <returns>
                <c>true</c> if the specified target exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Flubu.Targeting.TargetTree.TargetHelp(Flubu.ITaskContext)">
            <summary>
            The target for displaying help in the command line.
            </summary>
            <param name="context">The task context.</param>
        </member>
        <member name="P:Flubu.Targeting.TargetTree.DefaultTarget">
            <summary>
            Gets the default target for this runner.
            </summary>
            <remarks>The default target is the one which will be executed if
            the target is not specified in the command line.</remarks>
            <value>The default target.</value>
        </member>
        <member name="M:Flubu.TaskSession.Complete">
            <summary>
            Marks the runner as having completed its work sucessfully. This is the last method
            that should be called on the runner before it gets disposed.
            </summary>
        </member>
        <member name="T:Flubu.Tasks.Tests.UnitTestToolType">
            <summary>
            Test tool used with NCover.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.Tests.UnitTestToolType.NUnit">
            <summary>
            NUnit test tool.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.Tests.UnitTestToolType.Gallio">
            <summary>
            Gallio test tool (Gallio.Echo)
            </summary>
        </member>
        <member name="T:Flubu.Tasks.Configuration.LogScriptEnvironmentTask">
            <summary>
            Logs important enviroment information (machine name, OS version, etc).
            </summary>
        </member>
        <member name="M:Flubu.Tasks.Configuration.LogScriptEnvironmentTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Configuration.LogScriptEnvironmentTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Configuration.LogScriptEnvironmentTask.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Flubu.Tasks.Configuration.ReadConfigurationTask">
            <summary>
            Reads a configuration in XML form and stores it into <see cref="T:Flubu.ITaskContext"/>
            configuration settings;
            </summary>
        </member>
        <member name="M:Flubu.Tasks.Configuration.ReadConfigurationTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Configuration.ReadConfigurationTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Configuration.ReadConfigurationTask.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask">
            <summary>
            Copies a directory tree from the source to the destination.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask"/> class
            using a specified source and destination path and an indicator whether to overwrite existing files.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwriteExisting">if set to <c>true</c> the task will overwrite existing destination files.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.Execute(Flubu.ITaskContext,System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory tree from the source to the destination.
            </summary>
            <param name="context">The script execution environment.</param>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwriteExisting">if set to <c>true</c> the task will overwrite existing destination files.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.CopiedFilesList">
            <summary>
            Gets the list of all destination files that were copied.
            </summary>
            <value>The list of all destination files that were copied.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern">
            <summary>
            Gets or sets the exclusion regular expression pattern for files.
            </summary>
            <remarks>All files whose paths match this regular expression
            will not be copied. If the <see cref="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern"/> is <c>null</c>, it will be ignored.</remarks>
            <value>The exclusion pattern.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern">
            <summary>
            Gets or sets the inclusion regular expression pattern for files.
            </summary>
            <remarks>All files whose paths match this regular expression
            will be copied. If the <see cref="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern"/> is <c>null</c>, it will be ignored.</remarks>
            <value>The inclusion pattern.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyFileTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.DeleteDirectoryTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.DeleteFilesTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="T:Flubu.Tasks.FileSystem.SetAccessRuleTask">
            <summary>
            Sets a file access rule for a specified file path and identities.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.#ctor(System.String,System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.FileSystem.SetAccessRuleTask"/> class using a specified
            file path, an identity, file system rights and access control type.
            </summary>
            <remarks>This method overload should be used when a single identity needs to be specified.</remarks>
            <param name="path">The file path.</param>
            <param name="identity">Identity (example: "Network Service").</param>
            <param name="fileSystemRights">File system rights.</param>
            <param name="accessControlType">Type of the access control.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.#ctor(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.FileSystem.SetAccessRuleTask"/> class using a specified
            file path, file system rights and access control type.
            </summary>
            <remarks>This method overload should be used when the multiple identities need to be specified.</remarks>
            <param name="path">The file path.</param>
            <param name="fileSystemRights">File system rights.</param>
            <param name="accessControlType">Type of the access control.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.AddIdentity(System.String)">
            <summary>
            Adds an identity to a list of identites for which the access rule will be applied.
            </summary>
            <param name="identity">The identity.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.Execute(Flubu.ITaskContext,System.String,System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
            <summary>
            Sets a file access rule for a specified file path and identities.
            </summary>
            <param name="context">The script execution environment.</param>
            <param name="path">The file path.</param>
            <param name="identity">Identity (example: "Network Service").</param>
            <param name="fileSystemRights">File system rights.</param>
            <param name="accessControlType">Type of the access control.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.SetAccessRuleTask.Path">
            <summary>
            Gets or sets the file path for which the access rule should be set.
            </summary>
            <value>The file path for which the access rule should be set.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.SetAccessRuleTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.Misc.Log4NetConfigTask.AddConfigFile(System.String,System.String)">
            <summary>
            Adds the config file to the list of config files to be configured.
            </summary>
            <param name="configFileName">Name of the config file.</param>
            <param name="log4NetConfigXpath">XPath to the log4net configuration block.</param>
        </member>
        <member name="M:Flubu.Tasks.Misc.Log4NetConfigTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Misc.Log4NetConfigTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.Log4NetConfigTask.RootPriority">
            <summary>
            Gets or sets the root priority. 
            </summary>
            <value>The root priority. If set to <c>null</c>, the task does not modify the existing values in config files.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.Log4NetConfigTask.AppendToFile">
            <summary>
            Gets or sets the AppendToFile setting for the appenders.
            </summary>
            <value>The AppendToFile setting for the appenders. If set to <c>null</c>,
            the setting will not be modified in configuration files.</value>
        </member>
        <member name="T:Flubu.Tasks.Misc.SendMailTask">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.Misc.SendMailTask.ParseAddresses(System.Net.Mail.MailAddressCollection,System.String)">
            <summary>
            Parses the address list in form of a string with individual addresses separated by the ';' character. The parsed
            addresses are then stored into the specified <see cref="T:System.Net.Mail.MailAddressCollection"/>.
            </summary>
            <param name="collection">The mail address collection the parsed addresses should be stored into.</param>
            <param name="addresses">The addresses in form of a string.</param>
        </member>
        <member name="M:Flubu.Tasks.Misc.SendMailTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.SmtpServer">
            <summary>
            Gets or sets the SMTP server to use.
            </summary>
            <value>The SMTP server.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.From">
            <summary>
            Gets or sets the "from" field.
            </summary>
            <value>"From" field.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.To">
            <summary>
            Gets or sets the "to" address list. The individual addresses have to be separated by the ';' character.
            </summary>
            <value>"To" address list.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.CC">
            <summary>
            Gets or sets the "cc" address list. The individual addresses have to be separated by the ';' character.
            </summary>
            <value>"Cc" address list.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.Bcc">
            <summary>
            Gets or sets the "Bcc" address list. The individual addresses have to be separated by the ';' character.
            </summary>
            <value>"Bcc" address list.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.Subject">
            <summary>
            Gets or sets the subject of the mail.
            </summary>
            <value>The subject of the mail.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.Body">
            <summary>
            Gets or sets the body of the mail.
            </summary>
            <value>The body of the mail.</value>
        </member>
        <member name="F:Flubu.Tasks.Msmq.CreateMessageQueueMode.FailIfAlreadyExists">
            <summary>
            If the message queue already exists, the task should fail.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.Msmq.CreateMessageQueueMode.RecreateIfExists">
            <summary>
            If the message queue already exists, the message queue should be recreated.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.Msmq.CreateMessageQueueMode.DoNothingIfExists">
            <summary>
            If the message queue already exists, the task should do nothing.
            </summary>
        </member>
        <member name="T:Flubu.Tasks.Msmq.CreateMessageQueueTask">
            <summary>
            Creates a message queue with the specified path.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.Msmq.CreateMessageQueueTask.#ctor(System.String,System.Boolean,Flubu.Tasks.Msmq.CreateMessageQueueMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Msmq.CreateMessageQueueTask"/> class
            using a specified message queue path and an indicator of whether the queue
            should be transactional or not.
            </summary>
            <param name="messageQueuePath">The message queue path.</param>
            <param name="isTransactional">if set to <c>true</c> the queue will be transactional; otherwise <c>false</c>.</param>
            <param name="mode">The task mode.</param>
        </member>
        <member name="M:Flubu.Tasks.Msmq.CreateMessageQueueTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Msmq.CreateMessageQueueTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.Msmq.DeleteMessageQueueTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Msmq.DeleteMessageQueueTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="T:Flubu.Tasks.Processes.KillProcessTask">
            <summary>
            Kills a specified process.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.Processes.KillProcessTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Processes.KillProcessTask"/> class using a specified process name.
            </summary>
            <param name="processName">Name of the process to be killed.</param>
        </member>
        <member name="P:Flubu.Tasks.Processes.KillProcessTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Processes.RunProgramTask.LastExitCode">
            <summary>
            Gets the exit code of the last external program that was run by the runner.
            </summary>
            <value>The exit code of the last external program.</value>
        </member>
        <member name="T:Flubu.Tasks.Text.PeekXmlTask">
            <summary>
            Retrieves a value from an XML file.
            </summary>
            <remarks>
            If provided XPath does not find any matches, null is stored in specified configuration setting.
            If provided XPath matches exactly one node, it's value is stored as <see cref="T:System.String"/> in specified configuration setting.
            If provided XPath matches multiple nodes, their values are stored as <see cref="T:System.String"/>[] in specified configuration setting.
            </remarks>
        </member>
        <member name="M:Flubu.Tasks.Text.PeekXmlTask.Execute(Flubu.ITaskContext,System.String,System.String,System.String)">
            <summary>
            Reads a specified value from an XML file and stores it as a specified configuration setting.
            </summary>
            <param name="environment">The script execution environment.</param>
            <param name="xmlFileName">The name of the configuration file.</param>
            <param name="xpath">The xpath of the value to read.</param>
            <param name="configurationSettingName">Name of the configuration setting into which the XML value will be stored.</param>
            <remarks>
            If provided <paramref name="xpath"/> does not find any matches, null is stored in configuration setting <paramref name="configurationSettingName"/>.
            If provided <paramref name="xpath"/> matches exactly one node, it's value is stored as <see cref="T:System.String"/> in configuration setting <paramref name="configurationSettingName"/>.
            If provided <paramref name="xpath"/> matches multiple nodes, their values are stored as <see cref="T:System.String"/>[] in configuration setting <paramref name="configurationSettingName"/>.
            </remarks>
        </member>
        <member name="M:Flubu.Tasks.Text.PeekXmlTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Text.PeekXmlTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.PeekXmlTask.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Flubu.Tasks.Msmq.PurgeMessageQueueTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Msmq.PurgeMessageQueueTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="T:Flubu.Tasks.Text.UpdateXmlFileTask">
            <summary>
            Updates an XML file using the specified update commands.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Text.UpdateXmlFileTask"/> class with
            the specified XML file to be updated.
            </summary>
            <param name="fileName">The fileName of the XML file.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.UpdatePath(System.String,System.String)">
            <summary>
            Adds an "update" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="xpath">XPath for the nodes which should be updated.</param>
            <param name="value">New value of the selected nodes.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.DeletePath(System.String)">
            <summary>
            Adds an "delete" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="xpath">XPath for the nodes which should be deleted.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.AddPath(System.String,System.String,System.String)">
            <summary>
            Adds an "add" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="rootXpath">XPath for the root node on which an addition should be performed.</param>
            <param name="childNodeName">Name of the new child node.</param>
            <param name="value">The value for the new child node.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Method defining the actual work for a task.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Text.UpdateXmlFileTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="T:Flubu.Tasks.Text.XsltTransformTask">
            <summary>
            Transforms XML file using a XSLT stylesheet.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.Text.XsltTransformTask.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Text.XsltTransformTask"/> class
            that will transform a specified input file to a specified output file using the specified XSLT file.
            </summary>
            <param name="inputFile">The input file path.</param>
            <param name="outputFile">The output file path.</param>
            <param name="xsltFile">The XSLT file path.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.XsltTransformTask.Execute(Flubu.ITaskContext,System.String,System.String,System.String)">
            <summary>
            Transforms a specified input file to a specified output file using the specified XSLT file.
            </summary>
            <param name="environment">The script execution environment.</param>
            <param name="inputFile">The input file path.</param>
            <param name="outputFile">The output file path.</param>
            <param name="xsltFile">The XSLT file path.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.XsltTransformTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Text.XsltTransformTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.XsltTransformTask.InputFile">
            <summary>
            Gets or sets the input XML file path.
            </summary>
            <value>The input file.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.XsltTransformTask.OutputFile">
            <summary>
            Gets or sets the output XML file path.
            </summary>
            <value>The output file.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.XsltTransformTask.XsltFile">
            <summary>
            Gets or sets the XSLT file path.
            </summary>
            <value>The XSLT file.</value>
        </member>
        <member name="F:Flubu.Tasks.UserAccounts.CreateUserAccountMode.FailIfAlreadyExists">
            <summary>
            If the user account already exists, the task should fail.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.UserAccounts.CreateUserAccountMode.UpdateIfExists">
            <summary>
            If the user account already exists, it should be updated.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.UserAccounts.CreateUserAccountMode.DoNothingIfExists">
            <summary>
            If the user account already exists, the task should do nothing.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.UserAccounts.ImpersonateUserTask.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.UserAccounts.ImpersonateUserTask.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">If <code>false</code>, cleans up native resources. 
            If <code>true</code> cleans up both managed and native resources</param>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.ControlWindowsServiceMode.Start">
            <summary>
            Start the Windows service.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.ControlWindowsServiceMode.Stop">
            <summary>
            Stop the Windows service.
            </summary>
        </member>
        <member name="T:Flubu.Tasks.WindowsServices.InstallWindowsServiceMode">
            <summary>
            The operating mode for the <see cref="T:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask"/> task.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.InstallWindowsServiceMode.FailIfAlreadyInstalled">
            <summary>
            If the Windows service already exists, the task fails.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.InstallWindowsServiceMode.ReinstallIfExists">
            <summary>
            If the Windows service already exists, it is reinstalled.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.InstallWindowsServiceMode.DoNothingIfExists">
            <summary>
            If the Windows service already exists, the task does nothing.
            </summary>
        </member>
        <member name="T:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask">
            <summary>
            Installs a specified Windows service.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.#ctor(System.String,System.String,Flubu.Tasks.WindowsServices.InstallWindowsServiceMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask"/> class
            with the specified path to the Windows service executable.
            </summary>
            <param name="executablePath">The executable path.</param>
            <param name="serviceName">The Windows service name.</param>
            <param name="mode">Mode of the installation.</param>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.Execute(Flubu.ITaskContext,System.String,System.String,Flubu.Tasks.WindowsServices.InstallWindowsServiceMode)">
            <summary>
            Executes the task.
            </summary>
            <param name="environment">The environment.</param>
            <param name="executablePath">The executable path.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="mode">The task mode.</param>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.ServiceUninstallationWaitTime">
            <summary>
            Gets or sets the period to wait after service uninstallation before continuing with reinstallation.
            </summary>
            <value>The service uninstallation wait time.</value>
        </member>
        <member name="P:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="T:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask">
            <summary>
            Stops the specified Windows service if it exists on the system.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask"/> class
            with the specified service name.
            </summary>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Method defining the actual work for a task.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
    </members>
</doc>
