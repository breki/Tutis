step 1
------
- what's wrong?
    - what's right??

    - the parser code is unreadable
        - no vertical space inside the Parse method
        - local variable names do not mean anything
        - we are using magic strings and numbers (and duplicating them in code, too)

    - we are doing testing on a live service. What happens when the weather changes?

    - a lot of other stuff, but we'll leave it for next steps...

step 2
------
- we are now using a sample HTML file for testing
- the tests now run
- we put more meaningful names to local variables
- we put some vertical space

problems:
- the Parse method is too long and its behavior is not obvious
- the Test1 name is not descriptive
- also, the test should test one thing (one assertion)

step 3
------
- the Parse method is now shortened
    - we extracted two submethods (note the descriptive names!)
- we split the test method into two separate ones
- test methods now indicate what they check

problems:
- wrong levels of abstraction in the new Parse method
- the submethods are still too long
- move some submethod parameters to class members
- also move some local variables to class members to avoid new method parameters
- code duplication in the test code

step 4
------
- we split the Parse method into hierarchy of small methods with better matching
    levels of abstraction
    - reading code from top to bottom: "The Stepdown Rule"
    - note the order of submethods
- we moved some local variables to class members to avoid passing too many
    arguments in methods
    - note the order of class members: public, protected, private
        - the "Scissors Rule" (it goes agains the recommendation in the book)
- we removed duplicated setup code in tests and used more meaningful names

problems:
- there are still some problems with the level of abstraction in Parse method
- the Parser is breaking the "Single Responsibility Principle" (SRP)
    - it should do one thing, and one thing only
    - instead, it:
        1. reads HTML from files
        2. downloads HTML from Web
        3. moves along & parses the HTML code
        4. fills the WeatherData structure
    - this makes the class difficult to maintain, reuse, extend

step 5
------
- we used dependency injection to remove one responsibility from the Parser class
    - IHtmlFetcher

problems:
- still violating the SRP

----
- the code is pretty brittle - if HTML layout changes, it will be difficult to
    maintain the code
