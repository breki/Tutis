ometa OMetaTranslator<HostExpression> : Parser<HostExpression> {    
  Trans [:t Apply(t):ans]             -> { ans },    
 
  Success -> { CodeGen.Create()
			  .WriteLine("return MetaRules.Success();")
			 },

  Fail -> { CodeGen.Create()
 		   .WriteLine("{")
 		   .PushIndent()
	  	   .Write("return MetaRules.Fail(out ")
		   .WriteLeveledVar("result")
		   .Write(", out ")
		   .WriteLeveledVar("modifiedStream")
		   .WriteLineEnd(");")  
		   .PopIndent()
		   .WriteLine("}")	 
		  },
		  
  ResultAndOutputUsage -> { CodeGen.Create()
					       .Write(", out ")
					       .WriteLeveledVar("result")
					       .Write(", out ")
					       .WriteLeveledVar("modifiedStream")					       
					      },
					        							                 					     
 Act :expr -> { CodeGen.Create()
			    .Write()
			    .WriteLeveledVar("result")
			    .Write(" = (", expr, ").AsHostExpressionList()")
			    .WriteLineEnd(";")  
			   },   
  		   					   		     
  App  "Super" :rule Fail:f 
    ResultAndOutputUsage:o  -> { CodeGen.Create()
					   	        .Write("if(!MetaRules.Apply(__baseRule__, ")
					   	        .WriteLeveledVar("modifiedStream")
					   	        .Write(o)					   	    
					   	        .WriteLineEnd("))")
					   	        .Write(f)
					   	       },

  App  :rule Anything+:args Fail:f 
    ResultAndOutputUsage:o  -> { CodeGen.Create()
					   	        .Write("if(!MetaRules.ApplyWithArgs(", rule, ", ")
					   	        .WriteLeveledVar("modifiedStream")
					   	        .Write(o)					 
					   	        .Do(
					   				cg => {
					   						foreach(var currentArg in args)
					   						{					   							
					   							cg.Write(", (", currentArg, ").AsHostExpressionList()");
					   						}
					   					  }
					   	        )  	    
					   	        .WriteLineEnd("))")
					   	        .Write(f)
					   	       },
  
  App  :rule Fail:f 
    ResultAndOutputUsage:o  -> { CodeGen.Create()
					   	        .Write("if(!MetaRules.Apply(", rule, ", ")
					   	        .WriteLeveledVar("modifiedStream")
					   	        .Write(o)					   	    
					   	        .WriteLineEnd("))")
					   	        .Write(f)
					   	       },					   	       

  Set   :n Trans:v    -> { CodeGen.Create()
						   .Write(v)
						   .Write(n, " = ")
						   .WriteLeveledVar("result")
						   .WriteLineEnd(";") 
						 },
					 
  InputDecl -> { CodeGen.Create()
	            .Write("(")
	            .Write("OMetaStream<", Get<string>("CodeType"), "> ")
	            .WriteLeveledVar("inputStream")
				.Write(", out OMetaList<HostExpression> ")
				.WriteLeveledVar("result")
				.Write(", out OMetaStream <", Get<string>("CodeType"), "> ")
				.WriteLeveledVar("modifiedStream")
				.WriteLineEnd(")")
			   },					 
			   
  DelegateDeclaration 
	InputDecl:id -> { CodeGen.Create()
			   	     .WriteLine("delegate", id)
					},			
  InitialModSet -> { CodeGen.Create()
					.WriteLeveledVar("modifiedStream")
					.Write(" = ")
					.WriteLeveledVar("inputStream")		 
					.WriteLine(";")
				   },
				   
  And  
	   NotLast("Trans")*:xs Trans:y Success:suc
	   DelegateDeclaration:delDecl	   
	   InitialModSet:ims
	   ResultAndOutputUsage:resultUsage
	   Fail:f
		   -> { CodeGen.Create()
	           .WriteLine("if(!MetaRules.Apply(")
	           .PushVariableScope()
	           .PushIndent()
	           .WriteLine(delDecl)	           
	           .WriteLine("{")	  
	           .PushIndent()        			   	           
	           .Write(ims)
			   .Do(
				   cg => {
							foreach(var currentTrans in xs)
							{
								cg.Write(currentTrans);
							}
							cg.Write(y);
							cg.Write(suc);
						 })	
			   .PopIndent()		   		   
			   .Write("}")
			   .PopVariableScope()
			   .PopIndent()
			   .Write(", ")
			   .WriteLeveledVar("modifiedStream")
			   .WriteLineEnd(resultUsage, "))")
			   .Write(f)
			  },
  And        -> { CodeGen.Create() },
  
  MetaApplyFormat 
	TransFn:x 
	ResultAndOutputUsage:u
	Fail:f		 -> { CodeGen.Create()
				     .WriteLine("if(!MetaRules.{0}(")
  					 .PushIndent()
					 .Write(x)
					 .PopIndent()
					 .Write(", ")
					 .WriteLeveledVar("modifiedStream")
					 .Write(u)
					 .WriteLine("))")
					 .Write(f)
				     },
  
  Many MetaApplyFormat:f -> { CodeGen.Format(f, "Many") },
  Many1 MetaApplyFormat:f -> { CodeGen.Format(f, "Many1") },  
  Not MetaApplyFormat:f -> { CodeGen.Format(f, "Not") },    
  Lookahead MetaApplyFormat:f -> { CodeGen.Format(f, "Lookahead") },    
  Form MetaApplyFormat:f -> { CodeGen.Format(f, "Form") },    

  Or   TransFn*:xs 
	   Fail:f     -> { CodeGen.Create().Do(
					    cg => {
								cg.Write("if(!MetaRules.Or(")
								  .WriteLeveledVar("modifiedStream")
								  .Write(", out ")
								  .WriteLeveledVar("result")
								  .Write(", out ")
								  .WriteLeveledVar("modifiedStream")
								  .WriteLine(",");
								var moreThanOne = false;
								foreach(var l in xs)
								{
									if(moreThanOne)
									{
										cg.Write(",");
									}									
									cg.Write(l);
									moreThanOne = true;
								}
								cg.WriteLine("))")
								  .Write(f);
							  })
				      },
				      
  Pred :expr 
    Fail:f
			 -> { CodeGen.Create()
				 .WriteLine("if(!(", expr, "))")				 
				 .Write(f)
				 .WriteLeveledVar("result")
				 .WriteLine(" = true.AsHostExpressionList();")
				},			   
				      
  Rule  :name
        :over 
		InputDecl:id				
		InitialModSet:ims
		Locals:ls 
		Trans:body 
		Success:s
		    -> { CodeGen.Create()
			    .WriteLine("public ", over.As<bool>() ? "override" : "virtual", " bool ", name, id)
			    .WriteLine("{")
			    .PushIndent()	
			    .Do(cg=> {
							if(over.As<bool>())
							{
								cg.WriteLine("Rule<", Get<string>("CodeType"), "> __baseRule__ = base.", name.As<string>(), ";");
							}
						 })								    
			    .Write(ls, ims,  body, s)				   
			    .PopIndent()
			    .WriteLine("}")
			   },
  Locals  :ls  -> { CodeGen.Create().Do(
				   cg => {
							foreach(var l in ls.As<VariableSet>())
							{
								cg.WriteLine("OMetaList<HostExpression> ", l, " = null;");
							}
						 }
				  )							
				},          
  Grammar :usings :ns :name :gtd !{Sugar.StatementCons(
								() => {
										var codeType = gtd[0].As<string>();
										if(string.IsNullOrEmpty(codeType))
										{
											codeType = "char";
										}
										Set("CodeType", codeType);
										
										var defaultType = gtd[1].As<string>();
										if(!string.IsNullOrEmpty(defaultType))
										{
											Set("DefaultType", defaultType);
										}
									  }, true)} 
		:sName :btd
        Trans*:rules   -> { CodeGen.Create()
						   .Do(
						   cg => {
									foreach(var u in usings)
									{
										cg.WriteLine(u.As<string>());
									}
								 }
						   )
					  	   .WriteLine()						
						   .WriteLine("namespace " + ns.As<string>())
						   .WriteLine("{")								     
						   .PushIndent()
						   .Write("public class ", name)						   
						   .Write(" : ", sName)						   	
						   .Do(
							cg => {
								    var baseType = btd.As<string>();
								    if(!string.IsNullOrEmpty(baseType))
								    {
										cg.Write("<" + baseType + ">");
								    }									
								  }
						   )
						   .WriteLine()
						   .WriteLine("{")
						   .PushIndent()
						   .Do(
						    cg => {
									foreach(var currentRule in rules)
									{
										cg.Write(currentRule);									
									}
								  }
						   )						   
						   .PopIndent()
						   .WriteLine("}")								     
						   .PopIndent()
						   .WriteLine("}")
						  },
  TransFn = 
	Trans:x
	Success:s
	InitialModSet:ims
	DelegateDeclaration:deldecl
				    -> { CodeGen.Create()
				        .PushVariableScope()
						.WriteLine(deldecl)
						.WriteLine("{")
						.PushIndent()						
						.Write(ims, x, s)						
						.PopIndent()
						.WriteLine("}")
						.PopVariableScope()
					   }
}