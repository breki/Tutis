// Machine generated by peg-sharp 1.0.0.0 from ..\..\SpatialSpec.peg.
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Serialization;
using System.Security.Permissions;

[Serializable]
public sealed class ParserException : Exception
{
	public ParserException(int line, int col, int offset, string file, string input, string message) : base(string.Format("{0} at line {1} col {2}{3}", message, line, col, file != null ? (" in " + file) : "."))
	{
		File = file;
		Line = line;
		Col = col;
	}
	
	public string File {get; private set;}
	public int Line {get; private set;}
	public int Col {get; private set;}
}

// Thread safe if Parser instances are not shared across threads.
public sealed partial class SpatialSpec
{
	public SpatialSpec()
	{
		m_nonterminals.Add("SpatialSpecParser", new ParseMethod[]{this.DoParseSpatialSpecParserRule});
		m_nonterminals.Add("Specification", new ParseMethod[]{this.DoParseSpecificationRule});
		m_nonterminals.Add("SpecificationPart", new ParseMethod[]{this.DoParseSpecificationPartRule});
		m_nonterminals.Add("Target", new ParseMethod[]{this.DoParseTargetRule});
		m_nonterminals.Add("ConditionExpression", new ParseMethod[]{this.DoParseConditionExpressionRule});
		m_nonterminals.Add("AdditionalConditionExpression", new ParseMethod[]{this.DoParseAdditionalConditionExpressionRule});
		m_nonterminals.Add("NotConditionExpression", new ParseMethod[]{this.DoParseNotConditionExpressionRule});
		m_nonterminals.Add("Condition", new ParseMethod[]{this.DoParseConditionRule});
		m_nonterminals.Add("ComparisonCondition", new ParseMethod[]{this.DoParseComparisonConditionRule});
		m_nonterminals.Add("EqualityCondition", new ParseMethod[]{this.DoParseEqualityConditionRule});
		m_nonterminals.Add("ExistenceCondition", new ParseMethod[]{this.DoParseExistenceConditionRule});
		m_nonterminals.Add("TagName", new ParseMethod[]{this.DoParseTagNameRule});
		m_nonterminals.Add("EqualityOperator", new ParseMethod[]{this.DoParseEqualityOperatorRule});
		m_nonterminals.Add("ComparisonOperatorSingle", new ParseMethod[]{this.DoParseComparisonOperatorSingleRule});
		m_nonterminals.Add("ComparisonOperatorDouble", new ParseMethod[]{this.DoParseComparisonOperatorDoubleRule});
		m_nonterminals.Add("TagStringValue", new ParseMethod[]{this.DoParseTagStringValueRule});
		m_nonterminals.Add("TagNumericValue", new ParseMethod[]{this.DoParseTagNumericValueRule});
		m_nonterminals.Add("Identifier", new ParseMethod[]{this.DoParseIdentifierRule});
		m_nonterminals.Add("Literal", new ParseMethod[]{this.DoParseLiteralRule});
		m_nonterminals.Add("S", new ParseMethod[]{this.DoParseSRule});
		OnCtorEpilog();
	}
	
	public string Parse(string input)
	{
		return DoParseFile(input, null, "SpatialSpecParser");
	}
	
	// File is used for error reporting.
	public string Parse(string input, string file)
	{
		return DoParseFile(input, file, "SpatialSpecParser");
	}
	
	#region Non-Terminal Parse Methods
	// SpatialSpecParser := S ((Specification S)+ / ConditionExpression) S
	private State DoParseSpatialSpecParserRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("SpatialSpecParser");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 1, 2147483647,
					delegate (State s3, List<Result> r3) {return DoSequence(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Specification");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "S");});});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "ConditionExpression");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "SpatialSpecParser" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "SpatialSpecParser" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// Specification := SpecificationPart (S '.' S SpecificationPart)*
	private State DoParseSpecificationRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("Specification");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "SpecificationPart");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, ".");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "SpecificationPart");});});});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "Specification" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "Specification" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// SpecificationPart := Target? S '[' S ConditionExpression? S ']'
	private State DoParseSpecificationPartRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("SpecificationPart");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Target");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "[");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "ConditionExpression");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "]");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "SpecificationPart" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "SpecificationPart" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// Target := Identifier
	private State DoParseTargetRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("Target");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParse(_state, results, "Identifier");
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "Target" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "Target" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// ConditionExpression := NotConditionExpression (S AdditionalConditionExpression)*
	private State DoParseConditionExpressionRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("ConditionExpression");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "NotConditionExpression");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "AdditionalConditionExpression");});});});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "ConditionExpression" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "ConditionExpression" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// AdditionalConditionExpression := NotConditionExpression / (S 'and'? S NotConditionExpression) / (S 'or' S NotConditionExpression)
	private State DoParseAdditionalConditionExpressionRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("AdditionalConditionExpression");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "NotConditionExpression");},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoRepetition(s2, r2, 0, 1,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "and");});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "NotConditionExpression");});},
			delegate (State s, List<Result> r) {return DoSequence(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "or");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "S");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "NotConditionExpression");});});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "AdditionalConditionExpression" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "AdditionalConditionExpression" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// NotConditionExpression := 'not'? S (('(' S ConditionExpression S ')') / Condition)
	private State DoParseNotConditionExpressionRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("NotConditionExpression");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "not");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "(");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "ConditionExpression");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, ")");});},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Condition");});});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "NotConditionExpression" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "NotConditionExpression" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// Condition := ComparisonCondition / EqualityCondition / ExistenceCondition
	private State DoParseConditionRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("Condition");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "ComparisonCondition");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "EqualityCondition");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "ExistenceCondition");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "Condition" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "Condition" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// ComparisonCondition := TagName S (ComparisonOperatorDouble / ComparisonOperatorSingle) S TagNumericValue
	private State DoParseComparisonConditionRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("ComparisonCondition");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "TagName");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "ComparisonOperatorDouble");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "ComparisonOperatorSingle");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "TagNumericValue");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "ComparisonCondition" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "ComparisonCondition" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// EqualityCondition := TagName S EqualityOperator S TagStringValue
	private State DoParseEqualityConditionRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("EqualityCondition");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "TagName");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "EqualityOperator");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "TagStringValue");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "EqualityCondition" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "EqualityCondition" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// ExistenceCondition := TagName
	private State DoParseExistenceConditionRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("ExistenceCondition");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParse(_state, results, "TagName");
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "ExistenceCondition" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "ExistenceCondition" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// TagName := Identifier / Literal
	private State DoParseTagNameRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("TagName");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Literal");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "TagName" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "TagName" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// EqualityOperator := '=' / '!='
	private State DoParseEqualityOperatorRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("EqualityOperator");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "=");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "!=");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "EqualityOperator" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "EqualityOperator" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// ComparisonOperatorSingle := '=' / '<' / '>'
	private State DoParseComparisonOperatorSingleRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("ComparisonOperatorSingle");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "=");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "<");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ">");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "ComparisonOperatorSingle" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "ComparisonOperatorSingle" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// ComparisonOperatorDouble := '!=' / '<=' / '>='
	private State DoParseComparisonOperatorDoubleRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("ComparisonOperatorDouble");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "!=");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "<=");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ">=");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "ComparisonOperatorDouble" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "ComparisonOperatorDouble" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// TagStringValue := Identifier / Literal
	private State DoParseTagStringValueRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("TagStringValue");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Literal");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "TagStringValue" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "TagStringValue" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// TagNumericValue := [0-9]+ ('.' [0-9]*)?
	private State DoParseTagNumericValueRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("TagNumericValue");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 1, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, false, string.Empty, "09", null, "[0-9]");});},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, ".");},
					delegate (State s3, List<Result> r3) {return DoRepetition(s3, r3, 0, 2147483647,
						delegate (State s4, List<Result> r4) {return DoParseRange(s4, r4, false, string.Empty, "09", null, "[0-9]");});});});});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "TagNumericValue" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "TagNumericValue" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// Identifier := [:a-z] [:a-z0-9]*
	private State DoParseIdentifierRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("Identifier");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseRange(s, r, false, ":", "az", null, "[:a-z]");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, false, ":", "az09", null, "[:a-z0-9]");});});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "Identifier" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "Identifier" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// Literal := '"' [^\"]* '"'
	private State DoParseLiteralRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("Literal");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\"");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, true, "\"", string.Empty, null, "[^\"]");});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\"");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "Literal" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "Literal" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	
	// S := [ ]*
	private State DoParseSRule(State _state, List<Result> _outResults)
	{
		//Console.WriteLine("S");
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoRepetition(_state, results, 0, 2147483647,
			delegate (State s, List<Result> r) {return DoParseRange(s, r, false, " ", string.Empty, null, "[ ]");});
		
		if (_state.Parsed)
		{
			string value = results.Count > 0 ? results[0].Value : default(string);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "S" + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "S" + " " + DoEscapeAll(_state.Errors.ToString()));
		
		return _state;
	}
	#endregion
	
	#region Private Helper Methods
	partial void OnCtorEpilog();
	partial void OnParseProlog();
	partial void OnParseEpilog(State state);
	
	private string DoParseFile(string input, string file, string rule)
	{
		Console.WriteLine(new string('-', 32));
		if (!string.IsNullOrEmpty(file))
			Console.WriteLine(file);
		
		m_file = file;
		m_input = m_file;				// we need to ensure that m_file is used or we will (in some cases) get a compiler warning
		m_input = input + "\x0";	// add a sentinel so we can avoid range checks
		m_cache.Clear();
		m_lineStarts = null;
		
		State state = new State(0, true);
		List<Result> results = new List<Result>();
		
		OnParseProlog();
		state = DoParse(state, results, rule);
		
		int i = state.Index;
		if (!state.Parsed)
			DoThrow(state.Errors.Index, state.Errors.ToString());
		else if (i < input.Length)
			if (state.Errors.Expected.Length > 0)
				DoThrow(state.Errors.Index, state.Errors.ToString());
			else
				DoThrow(state.Errors.Index, "Not all input was consumed starting from '" + input.Substring(i, Math.Min(16, input.Length - i)) + "'");
		OnParseEpilog(state);
		
		return results[0].Value;
	}
	
	public string DoEscapeAll(string s)
	{
		System.Text.StringBuilder builder = new System.Text.StringBuilder(s.Length);
		
		foreach (char ch in s)
		{
			if (ch == '\n')
				builder.Append("\\n");
			
			else if (ch == '\r')
				builder.Append("\\r");
			
			else if (ch == '\t')
				builder.Append("\\t");
			
			else if (ch < ' ')
				builder.AppendFormat("\\x{0:X2}", (int) ch);
			
			else
				builder.Append(ch);
		}
		
		return builder.ToString();
	}
	
	private static readonly string RightArrow = "\x2192";
	private static readonly string DownArrow = "\x2193";
	private static readonly string DownHookedArrow = "\x21A9";
	private const int DebugWidth = 30;
	private void DoDebugLine(int offset1, int offset2)
	{
		int line1 = DoGetLine(offset1);
		int line2 = DoGetLine(offset2);
		if (line1 > line2)
			Console.WriteLine(", lines {0}-{1}", line2, line1);
		else if (line1 < line2)
			Console.WriteLine(", lines {0}-{1}", line1, line2);
		else
			Console.WriteLine(", line {0}", line1);
		Console.WriteLine();
	}
	
	private void DoDebugMatch(int oldOffset, int newOffset, string label)
	{
		// Write the input centered on the new offset.
		int end = Math.Min(newOffset + DebugWidth, m_input.Length - 1);	// last char is 0x00
		int begin = Math.Max(end - 2*DebugWidth, 0);
		int length = end - begin;
		
		string text = m_input.Substring(begin, length);
		if (begin > 0)
			text = "..." + text;
		if (end < m_input.Length - 1)
			text += "...";
			
		text = text.Replace("\t", RightArrow);
		text = text.Replace("\n", DownArrow);
		text = text.Replace("\r", DownHookedArrow);
		
		// Write an arrow pointing to the new offset.
		int padding = begin > 0 ? 3 : 0;
		Console.WriteLine(text);
		
		Console.Write(new string(' ', padding + Math.Max(oldOffset - begin, 0)));
		Console.Write(new string('_', newOffset - Math.Max(oldOffset, begin)));
		Console.Write("^ ");
		Console.Write(label);
		DoDebugLine(oldOffset, newOffset);
		Console.Out.Flush();
	}
	
	private void DoDebugFailure(int offset, string label)
	{
		const int DebugWidth = 30;
		
		// Write the input centered on the offset.
		int end = Math.Min(offset + DebugWidth, m_input.Length - 1);	// last char is 0x00
		int begin = Math.Max(end - 2*DebugWidth, 0);
		int length = end - begin;
		
		string text = m_input.Substring(begin, length);
		if (begin > 0)
			text = "..." + text;
		if (end < m_input.Length - 1)
			text += "...";
			
		text = text.Replace("\t", RightArrow);
		text = text.Replace("\n", DownArrow);
		text = text.Replace("\r", DownHookedArrow);
		
		// Write an arrow pointing to the old offset.
		Console.WriteLine(text);
		
		int padding = begin > 0 ? 3 : 0;
		Console.Write(new string(' ', padding + Math.Max(offset - begin, 0)));
		Console.Write("^ ");
		Console.Write(label);
		DoDebugLine(offset, offset);
		Console.Out.Flush();
	}
	
	// This is most often used just for error handling where it is a bit overkill.
	// However it's also sometimes used in rule prologs where efficiency is more
	// important (and doing a bit of extra work in the error case is not very harmful).
	private int DoGetLine(int index)
	{
		if (m_lineStarts == null)
			DoBuildLineStarts();
			
		int line = m_lineStarts.BinarySearch(index);
		if (line >= 0)
			return line + 1;
			
		return ~line;
	}
	
	private void DoBuildLineStarts()
	{
		m_lineStarts = new List<int>();
		
		m_lineStarts.Add(0);		// line 1 starts at index 0 (even if we have no text)
		
		int i = 0;
		while (i < m_input.Length)
		{
			char ch = m_input[i++];
			
			if (ch == '\r' && m_input[i] == '\n')
			{
				m_lineStarts.Add(++i);
			}
			else if (ch == '\r')
			{
				m_lineStarts.Add(i);
			}
			else if (ch == '\n')
			{
				m_lineStarts.Add(i);
			}
		}
	}
	
	private int DoGetCol(int index)
	{
		int start = index;
		
		while (index > 0 && m_input[index - 1] != '\n' && m_input[index - 1] != '\r')
		{
			--index;
		}
		
		return start - index;
	}
	
	private void DoThrow(int index, string format, params object[] args)
	{
		int line = DoGetLine(index);
		int col = DoGetCol(index) + 1;	// editors seem to usually use 1-based cols so that's what we will report
	
		// We need this retarded if or string.Format will throw an error if it
		// gets a format string like "Expected { or something".
		if (args != null && args.Length > 0)
			throw new ParserException(line, col, index, m_file, m_input, DoEscapeAll(string.Format(format, args)));
		else
			throw new ParserException(line, col, index, m_file, m_input, DoEscapeAll(format));
	}
	
	private State DoParseLiteral(State state, List<Result> results, string literal)
	{
		State result;
		
		if (string.Compare(m_input, state.Index, literal, 0, literal.Length, true) == 0)
		{
			results.Add(new Result(this, state.Index, literal.Length, m_input, default(string)));
			result = new State(state.Index + literal.Length, true, state.Errors);
		}
		else
		{
			result = new State(state.Index, false, ErrorSet.Combine(state.Errors, new ErrorSet(state.Index, literal)));
		}
		
		return result;
	}
	
	private State DoParse(State state, List<Result> results, string nonterminal)
	{
		State start = state;
		
		CacheValue cache;
		CacheKey key = new CacheKey(nonterminal, start.Index, m_context);
		if (!m_cache.TryGetValue(key, out cache))
		{
			ParseMethod[] methods = m_nonterminals[nonterminal];
			
			int oldCount = results.Count;
			state = DoChoice(state, results, methods);
			
			bool hasResult = state.Parsed && results.Count > oldCount;
			string value = hasResult ? results[results.Count - 1].Value : default(string);
			cache = new CacheValue(state, value, hasResult);
			m_cache.Add(key, cache);
		}
		else
		{
		Console.WriteLine(nonterminal);
			if (cache.HasResult)
				results.Add(new Result(this, start.Index, cache.State.Index - start.Index, m_input, cache.Value));
		
			State _state = cache.State;
			State _start = start;
		if (_state.Parsed)
			DoDebugMatch(_start.Index, _state.Index, "cached" + nonterminal + " parsed");
		if (!_state.Parsed)
			DoDebugFailure(_start.Index, "cached" + nonterminal + " " + DoEscapeAll(_state.Errors.ToString()));
		}
		
		return cache.State;
	}
	
	private State DoChoice(State state, List<Result> results, params ParseMethod[] methods)
	{
		State start = state;
		int startResult = results.Count;
		
		foreach (ParseMethod method in methods)
		{
			State temp = method(state, results);
			if (temp.Parsed)
			{
				state = temp;
				break;
			}
			else
			{
				state = new State(start.Index, false, ErrorSet.Combine(state.Errors, temp.Errors));
				results.RemoveRange(startResult, results.Count - startResult);
			}
		}
		
		return state;
	}
	
	private State DoSequence(State state, List<Result> results, params ParseMethod[] methods)
	{
		State start = state;
		int startResult = results.Count;
		
		foreach (ParseMethod method in methods)
		{
			State temp = method(state, results);
			if (temp.Parsed)
			{
				state = temp;
			}
			else
			{
				state = new State(start.Index, false, ErrorSet.Combine(start.Errors, temp.Errors));
				results.RemoveRange(startResult, results.Count - startResult);
				break;
			}
		}
		
		return state;
	}
	
	private State DoRepetition(State state, List<Result> results, int min, int max, ParseMethod method)
	{
		State start = state;
		
		int count = 0;
		while (count <= max)
		{
			State temp = method(state, results);
			if (temp.Parsed && temp.Index > state.Index)
			{
				state = temp;
				++count;
			}
			else
			{
				state = new State(state.Index, true, ErrorSet.Combine(state.Errors, temp.Errors));
				break;
			}
		}
		
		if (count < min || count > max)
			state = new State(start.Index, false, ErrorSet.Combine(start.Errors, state.Errors));
		
		return state;
	}
	
	private State DoParseRange(State state, List<Result> results, bool inverted, string chars, string ranges, UnicodeCategory[] categories, string label)
	{
		char ch = char.ToLower(m_input[state.Index]);
		
		bool matched = chars.IndexOf(ch) >= 0;
		for (int i = 0; i < ranges.Length && !matched; i += 2)
		{
			matched = ranges[i] <= ch && ch <= ranges[i + 1];
		}
		for (int i = 0; categories != null && i < categories.Length && !matched; ++i)
		{
			matched = char.GetUnicodeCategory(ch) == categories[i];
		}
		
		if (inverted)
			matched = !matched && ch != '\x0';
		
		if (matched)
		{
			results.Add(new Result(this, state.Index, 1, m_input, default(string)));
			return new State(state.Index + 1, true, state.Errors);
		}
		
		return new State(state.Index, false, ErrorSet.Combine(state.Errors, new ErrorSet(state.Index, label)));
	}
	#endregion
	
	#region Private Types
	private struct CacheKey : IEquatable<CacheKey>
	{
		public CacheKey(string rule, int index, object context)
		{
			m_rule = rule;
			m_index = index;
			m_context = context;
		}
		
		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			
			if (GetType() != obj.GetType())
				return false;
			
			CacheKey rhs = (CacheKey) obj;
			return this == rhs;
		}
		
		public bool Equals(CacheKey rhs)
		{
			return this == rhs;
		}
		
		public static bool operator==(CacheKey lhs, CacheKey rhs)
		{
			if (lhs.m_rule != rhs.m_rule)
				return false;
			
			if (lhs.m_index != rhs.m_index)
				return false;
			
			if (lhs.m_context != rhs.m_context)
				return false;
			
			return true;
		}
		
		public static bool operator!=(CacheKey lhs, CacheKey rhs)
		{
			return !(lhs == rhs);
		}
		
		public override int GetHashCode()
		{
			int hash = 0;
			
			unchecked
			{
				hash += m_rule.GetHashCode();
				hash += m_index.GetHashCode();
				hash += m_context.GetHashCode();
			}
			
			return hash;
		}
		
		private string m_rule;
		private int m_index;
		private object m_context;
	}
	
	private struct CacheValue
	{
		public CacheValue(State state, string value, bool hasResult)
		{
			State = state;
			Value = value;
			HasResult = hasResult;
		}
		
		public State State;
		
		public string Value;
		
		public bool HasResult;
	}
	
	private delegate State ParseMethod(State state, List<Result> results);
	
	// These are either an error that caused parsing to fail or the reason a
	// successful parse stopped.
	private struct ErrorSet
	{
		public ErrorSet(int index, string expected)
		{
			Index = index;
			Expected = new string[]{expected};
		}
		
		public ErrorSet(int index, string[] expected)
		{
			Index = index;
			Expected = expected;
		}
		
		// The location associated with the errors. For a failed parse this will be the
		// same as State.Index. For a successful parse it will be State.Index or later.
		public int Index;
		
		// This will be the name of something which was expected, but not found.
		public string[] Expected;
		
		public static ErrorSet Combine(ErrorSet lhs, ErrorSet rhs)
		{
			if (lhs.Index > rhs.Index)
			{
				return lhs;
			}
			else if (lhs.Index < rhs.Index)
			{
				return rhs;
			}
			else
			{
				List<string> errors = new List<string>(lhs.Expected.Length + rhs.Expected.Length);
				errors.AddRange(lhs.Expected);
				foreach (string err in rhs.Expected)
				{
					if (errors.IndexOf(err) < 0)
						errors.Add(err);
				}
				return new ErrorSet(lhs.Index, errors.ToArray());
			}
		}
		
		public override string ToString()
		{
			if (Expected.Length > 0)
				return string.Format("Expected {0}", string.Join(" or ", Expected));
			else
				return "<none>";
		}
	}
	
	// The state of the parser.
	private struct State
	{
		public State(int index, bool parsed)
		{
			Index = index;
			Parsed = parsed;
			Errors = new ErrorSet(index, new string[0]);
		}
		
		public State(int index, bool parsed, ErrorSet errors)
		{
			Index = index;
			Parsed = parsed;
			Errors = errors;
		}
		
		// Index of the first unconsumed character.
		public int Index;
		
		// True if the expression associated with the state successfully parsed.
		public bool Parsed;
		
		// If Parsed is false then this will explain why. If Parsed is true it will
		// say why the parse stopped.
		public ErrorSet Errors;
	}
	
	// The result of parsing a literal or non-terminal.
	private struct Result
	{
		public Result(SpatialSpec parser, int index, int length, string input, string value)
		{
			m_parser = parser;
			m_index = index;
			m_length = length;
			m_input = input;
			Value = value;
		}
		
		// The text which was parsed by the terminal or non-terminal.
		public string Text {get {return m_input.Substring(m_index, m_length);}}
		
		// The 0-based character index the (non)terminal started on.
		public int Index {get {return m_index;}}
		
		// The 1-based line number the (non)terminal started on.
		public int Line {get {return m_parser.DoGetLine(m_index);}}
		
		// The 1-based column number the (non)terminal started on.
		public int Col {get {return m_parser.DoGetCol(m_index);}}
		
		// For non-terminals this will be the result of the semantic action, 
		// otherwise it will be the default value.
		public string Value;
		
		private SpatialSpec m_parser;
		private int m_index;
		private int m_length;
		private string m_input;
	}
	
	#endregion
	
	#region Fields
	private string m_input;
	private string m_file;
	private object m_context = 0;
	private Dictionary<string, ParseMethod[]> m_nonterminals = new Dictionary<string, ParseMethod[]>();
	private Dictionary<CacheKey, CacheValue> m_cache = new Dictionary<CacheKey, CacheValue>();
	private List<int> m_lineStarts;	// offsets at which each line starts
	#endregion
}
